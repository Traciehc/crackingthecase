Welcome back. This is level four, section two, Withholding Widths, where we're going to be talking about the new property for setting width values. So far, we've learned how to have items wrap and grow and shrink, but in order to create a two‑column layout like this, we need to be able to set consistent widths. The flex‑basis property is used to specify the initial size of a flex item. It defaults to auto and currently supports CSS units like percentage, pixels, ems, rems, and more. We've seen flex‑basis in action so far as elements adjust to the size of their content. Here we're going to override that with flex‑basis. On our containing element, we're going to set a flex‑basis of 47.5%. That's going to have two containers right next to each other. We're using justify‑content to add the space in between. For our images, we're using a flex‑basis of 140 pixels. That's going to get a consistent image container size on all of our clues. Here we can see how flex‑basis works when we have a specific pixel value and allow the other item to adjust to the space. As the screen size shrinks, the text area is going to continually get smaller until we have all of the items wrap. We can use absolute units in flex‑basis. So here with four divs in a flex container, we're setting each div to 250 pixels. By default, they won't grow any larger than the 250 pixels, so even though our flex container has more space, those four divs are only going to take up the 250 pixels each. Alternatively, we can use percentages as a relative unit or combine a pixel width with a flex‑grow of 1 so that the items will grow beyond their 250 pixels when the container grows larger than that as well. We may be getting more content‑based values in the future, so you'll want to keep an eye on the spec. Now it's your turn to use flex‑basis to control widths and the challenges.

Autoscroll