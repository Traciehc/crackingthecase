Welcome back. This is level five, section one, Property Plotting, and we'll be talking about aligning content in edge cases. In looking at the UIs that we've built so far, there's a couple opportunities to make things look a little bit better. Could we have the heights match between the input and the button, and could we get all of the content to center in our full‑screen layout? The align‑self property is used to align individual flex items by overriding their parent's align‑items value. Its default value is also stretch, and it accepts the same values as align‑items. In this example, we're adding align‑self of stretch to the input to have it take up the same vertical height as the container. In this example, the three items are set to align‑items: stretch by default, and we're using align‑self: center to have the main element adjust to the size of the content and center horizontally. There's an alternative way to handle layout with Flexbox. Here if we set our body to our flex container and have each item wrap, we can use flex‑basis to force wrapping by putting the header and footer at 100%. Each item is going to default to stretch, so it's going to fill up all of the space on the vertical, the cross axis. If we try to use our align‑items property and set it to space‑between, we don't get any change. That's because align‑items doesn't control wrapped items. The align‑content property is used to align wrapped flex items. Its default value is also stretch and it accepts the same values as align‑items. If we set space‑between to align‑content, that is going to align those wrapped items and give us space between our header, our main, and our footer. Now it's your turn to handle some edge cases with align‑self and align‑content in the challenges.

Autoscroll